# -*- coding: utf-8 -*-
"""Inference and TFLite Conversion

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K_5g8IpfTBwr0CimYoBJsa4jW9wDG64x
"""

!pip install --upgrade tensorflow
import tensorflow as tf
from tensorflow.keras.models import load_model
import cv2
import numpy as np
import os

from google.colab import drive
drive.mount('/content/drive')

# Directories
drunk_dir = '/content/drive/MyDrive/IntoxDetect/Code/cropped/drunk'
sober_dir = '/content/drive/MyDrive/IntoxDetect/Code/cropped/sober'

# Load images and labels
def load_images_from_folder(folder, label):
    images = []
    labels = []
    for filename in os.listdir(folder):
        img = cv2.imread(os.path.join(folder, filename))
        if img is not None:
            img = cv2.resize(img, (224, 224))
            images.append(img)
            labels.append(label)
    return images, labels

drunk_images, drunk_labels = load_images_from_folder(drunk_dir, 1)  # Label 1 for drunk
sober_images, sober_labels = load_images_from_folder(sober_dir, 0)  # Label 0 for sober

face_model_dir = '/content/drive/MyDrive/IntoxDetect/best_model_drunk_sober_face_adamax.keras'
def drunk_sober_face_detection(model_dir, img_dir):
  face_model = load_model(model_dir)
  face_img = img_dir
  img = cv2.imread(face_img)
  img = cv2.resize(img, (224, 224))
  img = np.expand_dims(img, axis=0)
  img = img.astype('float32') / 255.0
  prediction = face_model.predict(img)
  print(prediction)
  print("Chance of Intoxication:" + str(prediction[0][1]))
  print("Chance of Sobriety:" + str(prediction[0][0]))
  if(prediction[0][1] > 0.3):
    print("Drunk")
  else:
    print("Sober")
drunk_sober_face_detection(face_model_dir, "/content/drive/MyDrive/IntoxDetect/Code/ShauryaPic.jpg")

converter = tf.lite.TFLiteConverter.from_keras_model(load_model(face_model_dir))
converter.optimizations = [tf.lite.Optimize.DEFAULT]
#converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS, tf.lite.OpsSet.SELECT_TF_OPS]
#converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS]
def representative_dataset_gen():
  for img in drunk_images[:4600] + sober_images[:4600]:
    img = np.expand_dims(img, axis=0)
    img = img.astype('float32') / 255.0
    yield [img]

converter.representative_dataset = representative_dataset_gen
converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS_INT8]
converter.inference_input_type = tf.int8
converter.inference_output_type = tf.int8
tflite_model = converter.convert()

tflite_dir = "drunk_sober_face_adamax.tflite"
with open(tflite_dir, 'wb') as f:
  f.write(tflite_model)

!pip install --upgrade tflite-runtime
import tflite_runtime.interpreter as tflite
from PIL import Image

interpreter = tflite.Interpreter(model_path=tflite_dir)
interpreter.allocate_tensors()

input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

input_shape = input_details[0]['shape']
input_scale, input_zero_point = input_details[0]['quantization']

tfl_img = Image.open("/content/drive/MyDrive/IntoxDetect/Code/ShauryaPic.jpg")
tfl_img = tfl_img.resize((224, 224))
tfl_img = np.array(tfl_img, dtype=np.float32)
tfl_img = (tfl_img/255.0 - input_zero_point) / input_scale
tfl_img = np.round(tfl_img).astype(np.int8)
tfl_img = np.expand_dims(tfl_img, axis=0)

interpreter.set_tensor(input_details[0]['index'], tfl_img)

interpreter.invoke()

output_data = interpreter.get_tensor(output_details[0]['index'])
print(output_data)

if output_details[0]['quantization'] != (0.0, 0):
  output_scale, output_zero_point = output_details[0]['quantization']
  output_data = (output_data.astype(np.float32) - output_zero_point) *output_scale
  print("Dequantized Output:", output_data)

print("Chance of Intoxication:" + str(output_data[0][1]))
print("Chance of Sobriety:" + str(output_data[0][0]))
if(output_data[0][1] > 0.3):
  print("Drunk")
else:
  print("Sober")